let employees=[];let terminatedEmployees=[];const API_BASE='https://w40mq6ab11.execute-api.us-east-2.amazonaws.com/prod';async function loadEmployees(){const container=document.querySelector('.container');if(container){container.style.opacity='0.7';container.style.pointerEvents='none'}try{const response=await fetch(`${API_BASE}/employees`);const data=await response.json();if(data.employees){let allEmployees=data.employees;employees=allEmployees.filter(emp=>emp.Terminated!=='Yes');terminatedEmployees=allEmployees.filter(emp=>emp.Terminated==='Yes');renderDuplicateTable()}}catch(error){console.error('Load failed:',error)}finally{if(container){container.style.opacity='1';container.style.pointerEvents='auto'}}}function renderDuplicateTable(){const tbody=document.getElementById('duplicateTableBody');tbody.innerHTML='';const duplicates=findDuplicates();duplicates.forEach((emp,index)=>{const row=document.createElement('tr');row.innerHTML=`<td><input type="checkbox" class="duplicate-select" data-index="${index}" onchange="updateMergeButton()"></td><td>${emp.matchType}</td><td>${emp['First Name']||''}</td><td>${emp['Last Name']||''}</td><td>${emp.Department||''}</td><td>${emp.Email||''}</td><td>${emp['Employment Date']||''}</td><td class="actions-col"><button class="btn btn-terminate" onclick="deleteDuplicate(${index})" title="Delete Duplicate">üóëÔ∏è</button></td>`;tbody.appendChild(row)});document.getElementById('totalDuplicates').textContent=duplicates.length;updateMergeButton()}function findDuplicates(){const duplicates=[];const seen=new Map();const allEmployees=[...employees,...terminatedEmployees];allEmployees.forEach(emp=>{const email=(emp.Email||'').toLowerCase().trim();const name=`${emp['First Name']||''} ${emp['Last Name']||''}`.toLowerCase().trim();if(email&&seen.has(`email:${email}`)){duplicates.push({...emp,matchType:'Email'})}else if(email){seen.set(`email:${email}`,true)}if(name&&name!==' '&&seen.has(`name:${name}`)){duplicates.push({...emp,matchType:'Name'})}else if(name&&name!==' '){seen.set(`name:${name}`,true)}});return duplicates}function deleteDuplicate(index){if(!confirm('Delete this duplicate record?'))return;const duplicates=findDuplicates();const toDelete=duplicates[index];const empIndex=employees.findIndex(e=>isSameEmployee(e,toDelete));const termIndex=terminatedEmployees.findIndex(e=>isSameEmployee(e,toDelete));if(empIndex>=0)employees.splice(empIndex,1);if(termIndex>=0)terminatedEmployees.splice(termIndex,1);renderDuplicateTable();saveEmployeesToDB([...employees,...terminatedEmployees])}function isSameEmployee(emp1,emp2){if(!emp1||!emp2)return false;const email1=(emp1.Email||'').toLowerCase().trim();const email2=(emp2.Email||'').toLowerCase().trim();if(email1&&email2&&email1===email2)return true;const name1=`${emp1['First Name']||''} ${emp1['Last Name']||''}`.toLowerCase().trim();const name2=`${emp2['First Name']||''} ${emp2['Last Name']||''}`.toLowerCase().trim();return name1&&name2&&name1!=' '&&name2!=' '&&name1===name2}function toggleSelectAllDuplicates(){const selectAll=document.getElementById('selectAllDuplicates');const checkboxes=document.querySelectorAll('.duplicate-select');checkboxes.forEach(cb=>cb.checked=selectAll.checked);updateMergeButton()}function updateMergeButton(){const selected=document.querySelectorAll('.duplicate-select:checked');const mergeBtn=document.getElementById('mergeBtn');const countSpan=document.getElementById('selectedCount');if(mergeBtn)mergeBtn.disabled=selected.length<2;if(countSpan)countSpan.textContent=`${selected.length} selected`}async function mergeSelectedDuplicates(){const selected=document.querySelectorAll('.duplicate-select:checked');if(selected.length<2)return;if(!confirm(`Merge ${selected.length} duplicate records?`))return;const btn=document.getElementById('mergeBtn');const originalText=btn.textContent;btn.innerHTML='ü§î Merging...';btn.disabled=true;const indices=Array.from(selected).map(cb=>parseInt(cb.dataset.index));const duplicates=findDuplicates();const toMerge=indices.map(i=>duplicates[i]);toMerge.slice(1).forEach(dup=>{const empIndex=employees.findIndex(e=>isSameEmployee(e,dup));const termIndex=terminatedEmployees.findIndex(e=>isSameEmployee(e,dup));if(empIndex>=0)employees.splice(empIndex,1);if(termIndex>=0)terminatedEmployees.splice(termIndex,1)});try{await saveEmployeesToDB([...employees,...terminatedEmployees]);renderDuplicateTable()}catch(error){console.error('Merge failed:',error)}finally{btn.innerHTML=originalText;btn.disabled=false}}async function saveEmployeesToDB(allEmployees){try{const response=await fetch(`${API_BASE}/employees`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({employees:allEmployees})});if(!response.ok)throw new Error('Save failed');return await response.json()}catch(error){console.error('Database save failed:',error);throw error}}function searchDuplicates(){const term=document.getElementById('duplicateSearch').value.toLowerCase();const rows=document.querySelectorAll('#duplicateTableBody tr');rows.forEach(row=>{const text=row.textContent.toLowerCase();row.style.display=text.includes(term)?'':'none'})}document.addEventListener('DOMContentLoaded',function(){document.getElementById('duplicateSearch').addEventListener('keypress',function(e){if(e.key==='Enter')searchDuplicates()});document.getElementById('duplicateSearch').addEventListener('input',searchDuplicates);loadEmployees()});